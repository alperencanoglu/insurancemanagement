@using Microsoft.AspNetCore.Mvc.TagHelpers
@model Models.AgreementViewModel.AgreementFilterViewModel

@{
    ViewData["Title"] = "Index";
}

<h1>Agreements</h1>
<div class="row">
    <form method="get" asp-action="Index">
        <div class="col-md-12" style="float:left">
            <div class="form-group col-md-3" style="float:left;"> 
                <label>Partner Seçin</label>
                <select asp-for="SelectedPartnerIds" asp-items="Model.Partners" multiple class="form-control">
                </select>
            </div>
            <div class="form-group col-md-3 " style="float:left;">
                <label>Başlangıç Tarihi</label>
                <input asp-for="StartDate" class="form-control" type="date"/>
            </div>
            <div class="form-group col-md-3" style="float:left;">
                <label>Bitiş Tarihi</label>
                <input asp-for="EndDate" class="form-control" type="date"/>
            </div>
            <button type="submit" class="btn btn-primary">Filtrele</button>
        </div>
    </form>
    <div class="col-md-12">
        <div class="ui-widget" id="searchbox-container">
            <label for="agreementsautocomplete">Agreements: </label>
                <input class="input is-dark" type="text" name="city" placeholder="Search Agreement" id="searchbox" autocomplete="off" />
                <div class="control" id="dropdown-menu"></div>
        </div>
    </div>
</div>
<table class="table">
    <thead>
    <tr>
        <th>
            @Html.DisplayNameFor(model => model.PaginatedResult.Items.FirstOrDefault().AgreementName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.PaginatedResult.Items.FirstOrDefault().StartDate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.PaginatedResult.Items.FirstOrDefault().EndDate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.PaginatedResult.Items.FirstOrDefault().RiskAmount)
        </th>
        <th></th>
    </tr>
    </thead>
    <tbody>
    @foreach (var item in Model.PaginatedResult.Items) {
        <tr>
            <td>
                @Html.DisplayFor(modelItem => item.AgreementName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.StartDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.EndDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.RiskAmount)
            </td>
            <td>
                <a asp-action="Edit" asp-route-id="@item.Id">Edit</a> |
                <a asp-action="Details" asp-route-id="@item.Id">Details</a> |
                <a asp-action="Delete" asp-route-id="@item.Id">Delete</a>
            </td>
        </tr>
    }
    </tbody>
</table>




<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<h2>Veri Grafiği</h2>
<canvas id="myChart" width="400" height="200"></canvas>

<script>
    // Controller'dan gelen verileri alıyoruz
    var dataFromServer = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.PaginatedResult.Items.Select(x => x.RiskAmount)));

    var labelsFromServer = @Html.Raw(Newtonsoft.Json.JsonConvert.SerializeObject(Model.PaginatedResult.Items.Select(x => x.AgreementName)));

    var ctx = document.getElementById('myChart').getContext('2d');
    var myChart = new Chart(ctx, {
        type: 'bar',  // Grafik tipi: bar (çubuk grafik)
        data: {
            labels: labelsFromServer,  // X ekseni etiketleri
            datasets: [{
                label: 'Veri Seti',
                data: dataFromServer,  // Y ekseni değerleri
                backgroundColor: 'rgba(75, 192, 192, 0.2)',
                borderColor: 'rgba(75, 192, 192, 1)',
                borderWidth: 1
            }]
        },
        options: {
            scales: {
                y: {
                    beginAtZero: true  // Y ekseninin sıfırdan başlamasını sağlar
                }
            }
        }
    });
</script>






<script>
    const searchBox = document.getElementById('searchbox');
    const dropdownMenu = document.getElementById('dropdown-menu');
    const searchBoxContainer = document.getElementById('searchbox-container');

    searchBox.addEventListener("keyup", function(event) {

        const timer = setTimeout(function () {
            var sr = event.target.value;
            if(!sr) return; //Do nothing for empty value
            searchBoxContainer.classList.add("control", "is-loading");

            const request = new Request('@Url.Action("GetAgreementsWithName", "Agreement", new { Area = "User" })');
            fetch(request,{method:'POST', body:'name='+sr, headers: new Headers({
                    'Content-Type': 'application/x-www-form-urlencoded', 
                }),} )
                .then((response) => response.json())
                .then((data) => {
                    if (searchBox.value) { //src not cleaned, backspace removed
                        dropdownMenu.replaceChildren(searchResult(data));
                    }
                    searchBoxContainer.classList.remove("is-loading");
                });

        }, 500);
    });


    function searchResult(result){

        const ul = document.createElement('ul')
        ul.classList.add('box', 'mt-1' );

        loc.forEach((x)=>{
            if(!x)return;
            ul.appendChild(createListItem(x))
        })

        return ul;
    }
    function createListItem(x){

        const li = document.createElement('li')
        li.classList.add('py-1'); 
        li.innerText = x.name

        const selectEvent = function(event){
            event.stopPropagation(); 
            const li = event.target
            clearDropdown();
            searchBox.value = x.agreementName;
        };

        li.addEventListener('click', selectEvent)
        li.addEventListener('touchstart', selectEvent)

        return li
    }
    function clearDropdown(){
        dropdownMenu.innerHTML = '';
        searchBoxContainer.classList.remove("is-loading");
    }

    //keep checking for an empty search box every 5 seconds
    setInterval(function() {
        if (!searchBox.value) { //empty search box
            clearDropdown()
        }
    }, 500);
</script>




<div id="output">WebSocket bağlantısı için basit bir örnek</div>

<script>
        // WebSocket bağlantısını başlatıyoruz
        let socket = new WebSocket("https://localhost:7068/ws");

        // Bağlantı açıldığında çalışır
        socket.onopen = function(e) {
            console.log("Connection established.");
            document.getElementById('output').innerHTML += '<p>Connection established.</p>';

            // Her 10 saniyede bir mesaj göndermek için setInterval kullanıyoruz
             setInterval(function() {

                 if (socket.readyState === WebSocket.OPEN) {
                     const message = `Ping from client at ${new Date().toLocaleTimeString()}`;
                     socket.send(message);
                     document.getElementById('output').innerHTML += `<p>Sent: ${message}</p>`;
                 } else {
                     clearInterval(intervalId);  // WebSocket kapalıysa mesaj göndermeyi durdur
                 }
            }, 100); // 10000 milisaniye = 10 saniye
        };

        // Sunucudan gelen mesajları dinliyoruz
        socket.onmessage = function(event) {
            console.log(`[message] Data received from server: ${event.data}`);
            document.getElementById('output').innerHTML += `<p>Server: ${event.data}</p>`;
        };

        // Bağlantı kapandığında çalışır
        socket.onclose = function(event) {
            if (event.wasClean) {
                console.log(`[close] Connection closed cleanly, code=${event.code}, reason=${event.reason}`);
            } else {
                console.error('[close] Connection died');
            }
        };

        // Hata oluştuğunda çalışır
        socket.onerror = function(error) {
            console.error(`[error] ${error.message}`);
        };

        setTimeout(function() {
            socket.close()
            document.getElementById('output').innerHTML += `<p>Socket Closed</p>`;
        }, 10000); // 10000 milisaniye = 10 saniye
    </script>